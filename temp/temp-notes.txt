# importing required modules
import os
import time
  
# folder is the name of the folder in which we
# have to perform the delete operation
folder = "demo"
  
# N is the number of days for which
# we have to check whether the file
# is older than the specified days or not
N = 3
  
# changing the current working directory
# to the folder specified
os.chdir(os.path.join(os.getcwd(), folder))
  
# get a list of files present in the given folder
list_of_files = os.listdir()
  
# get the current time
current_time = time.time()
  
# "day" is the number of seconds in a day
day = 86400
  
# loop over all the files
for i in list_of_files:
    # get the location of the file
    file_location = os.path.join(os.getcwd(), i)
    # file_time is the time when the file is modified
    file_time = os.stat(file_location).st_mtime
  
    # if a file is modified before N days then delete it
    if(file_time < current_time - day*N):
        print(f" Delete : {i}")
        os.remove(file_location)

====================================================
====================================================
    @after_this_request
    def remove_files(response):
        time.sleep(10)
        os.remove(os.path.join(upload_folder, f'grey_{filename}'))
        os.remove(os.path.join(upload_folder, filename))
        os.remove(os.path.join(upload_folder, f'th_{filename}'))
        os.remove(os.path.join(upload_folder, f'counted_{filename}'))
        return(response)

=====================================================
=====================================================
    @app.after_request
    def after_request(after_request):
        if current_user.is_authenticated:
            print('after request running: user loaded. ID: '+f'{current_user}')
            user = f'{current_user}'
            id = user.split(f'{current_user}')
            print (id)
            #os.remove(os.path.join(os.path.join(UPLOAD_FOLDER, user_id), f'grey_{filename}'))
        return(after_request)

=====================================================
=====================================================

@socketio.on('disconnect')
def test_disconnect():
    print('Client disconnected')

=====================================================
=====================================================

main.py:

from flask_socketio import SocketIO, emit

app = create_app()
socketio = SocketIO(app)

@socketio.on('connect')
def test_connect():
    print('Client connected')
    emit('after connect',  {'data':'Lets dance'})

@socketio.on('disconnect')
def test_disconnect():
    print('Client disconnected')

if __name__ == '__main__':
    socketio.run(app)

base.html:

        <script src="//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js" integrity="sha256-yr4fRk/GU1ehYJPAs8P4JlTgu0Hdsp4ZKrx8bDEDC3I=" crossorigin="anonymous"></script>
          <script type="text/javascript" charset="utf-8">
              var socket = io();
              socket.on('connect', function() {
                  socket.emit('my event', {data: 'I\'m connected!'});
              });
          </script>

=====================================================
=====================================================
@app.after_request
def delete_images(list):
    list_of_directories = os.listdir(UPLOAD_FOLDER)
    print(list_of_directories)    
    return list

=====================================================
=====================================================
file_path = 'myfolder/data.txt'
#get created time
n = os.path.getctime(file_path)
#convert epoch to a timestamp
timestamp = datetime.datetime.fromtimestamp(n).strftime('%c')
print(timestamp)


# time.time() gives you the current time
# os.path.getmtime(path) give you the modified time for a file

modified_time=os.path.getmtime(filename)
if time.time()-modified_time > 300: #time in seconds
    os.remove(filename)

=====================================================
=====================================================

print(time.strftime("%A, %d. %B %Y %I:%M:%S %p"))
time.ctime(last_modified)

=====================================================
=====================================================

<div class="imgbox">
    <a href="{{ url_for('cell_counting.count_cells') }}">
    <img src="{{ url_for('static', filename='images/cell_count.jpeg') }}" width = "200" class="left-fit" alt="Cell counting"></a>
</div>